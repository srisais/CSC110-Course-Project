"""CSC110 Course Project - Billy Guo and Sridhar Sairamcommand_line_interface.pyModule Description==================This file contains the function needed to run everything using thecommand-line-interface, or the python shell."""# import os# <functions_and_classes> already imports osfrom functions_and_classes import *DATABASE_FOLDER_NAME = "database_files"PAGE_LINE = '-' * 30BREAK_LINE = '-' * 15################################################################################ Command Line Interface Helper###############################################################################def check_database_files_directory(sub_directory: str) -> bool:    """Returns True if the database_directory exists, and    has at least 1 <.txt> file in it. Otherwise, it returns false.    """    # current_directory = os.getcwd()    # this method gets the path in the style the current computer is on    current_directory = os.path.dirname(__file__)    # this method gets the path in "Linux" style    # Rather than dealing with the Path library, I just am just    # going to stick with Linux paths    database_directory = current_directory + "/" + sub_directory    try:        txt_files = get_list_of_txt_file_paths_in_folder(            database_directory        )        if len(txt_files) >= 1:            return True        else:            return False    except FileNotFoundError:        return Falsedef ensure_database_files_exist(sub_directory: str) -> None:    """Runs a loop that only breaks when the valid database_files exists.    Interacts with console.    """    while True:        print("Checking database files folder")        database_folder_exists = check_database_files_directory(sub_directory)        if database_folder_exists:            print("Database folder with text files found")            print("Assuming that the text files are formatted properly")            break        else:            print("Database folder with valid files NOT found!")            print("Please ensure that the folder with the text files exists")            input("Press <Return> to re-check")def choose_course_range(master_list: list[CourseEnrollmentHistory]) -> None:    """Interacts with user to view collection of courses    Interacts with console    """    num_courses = len(master_list)    print(f"Since there are {num_courses} course(s), to help choose a course better,")    print("You can view a smaller of selection of courses at a time")    print("Each course has a number assigned to it.")    print("By inputting two numbers separated by a space,")    print("where the first number is smaller than the second,")    print("you will get a list of courses whose course numbers are in that range")    print("Input an empty string to move to choosing a specific course to graph.")    print(f"Both numbers should be in the range [0, {num_courses - 1}]")    print(BREAK_LINE)    while True:        indices = input("Please input a range (two numbers separated by a space): ")        if indices == "":            break        indices = indices.split()        try:            indices = [int(a) for a in indices]            # technically, this will still work even if both indices are the same            if indices[1] < indices[0]:                raise ValueError            if not (indices[0] in range(num_courses) and indices[1] in range(num_courses)):                raise ValueError            # courses_to_show = master_list[indices[0]:indices[1]]            print(BREAK_LINE)            for i in range(indices[0], indices[1] + 1):                print(f"[{i}]:", master_list[i].course.__str__())            print(BREAK_LINE)            continue        except ValueError:            print("Please input the indices in the proper format")            continuedef choose_course(master_list: list[CourseEnrollmentHistory]) -> None:    """Interacts with user to choose a course they want to plot.    Interacts with console.    """    while True:        num_courses = len(master_list)        print("Now, you will choose a course to graph.")        print("Input an empty string to finish graphing.")        while True:            course_num = input(f"Please choose a course number between 0 and {num_courses - 1} (inclusive)")            if course_num == "":                return                # break            try:                course_num = int(course_num)                if course_num not in range(num_courses):                    raise ValueError                print(f"The course to graph is ||| {master_list[course_num].course.__str__()} |||")                is_correct = input("Is this what you wanted? (Y/N): ")                if is_correct.upper() == "Y":                    break                else:                    continue            except ValueError:                print("Please input a valid course number")                continue        max_predict_years = len(master_list[course_num].year_str_to_course_enrollment)        print("The number of years to predict must be a positive integer")        print(f"in the range: [0, {max_predict_years - 1}]")        while True:            num_years_to_predict = input("Please input the number of years to predict: ")            if num_years_to_predict == "":                return                # break            try:                num_years_to_predict = int(num_years_to_predict)                if num_years_to_predict not in range(0, max_predict_years):                    raise ValueError                break            except ValueError:                print("Please input a valid number of years to predict")                continue        print("The degree of the polynomial regression must be a positive integer")        while True:            polynomial_degree = input("Polynomial degree: ")            if polynomial_degree == "":                return                # break            try:                polynomial_degree = int(polynomial_degree)                if polynomial_degree < 0:                    raise ValueError                break            except ValueError:                print("Please input a valid polynomial degree")                continue        print(f"Graphing the graphs for {master_list[course_num].course.__str__()}")        graph_info = plot_graph(            master_list[course_num],            num_years_to_predict,            polynomial_degree        )        plot_differences_graph(            graph_info,            master_list[course_num].course.__str__(),            num_years_to_predict,            polynomial_degree        )        # this was supposed to loop and ask again, but the graphing seems to stop        # when the input is being asked...        # print("Input a non-empty string to graph another course")        # print("Input an empty string to exit graphing")        # stop_graphing = input()        # print(PAGE_LINE)        # if stop_graphing == "":        #     break        # else:        #     continue        print("Finished Graphing!")        print(PAGE_LINE)        break################################################################################ Main Loop###############################################################################def main_loop() -> None:    """The main CLI loop interface.    All interactions will be done through the Python console/command line    """    intro = (        PAGE_LINE,        "CSC110 Course Project",        "Billy Guo and Sridhar Sairam",        PAGE_LINE,        "Viewing and analyzing course enrollment changes over the years",        "for specific Ontario high school courses",        PAGE_LINE    )    print("\n".join(intro))    print(PAGE_LINE)    ensure_database_files_exist(DATABASE_FOLDER_NAME)    print(PAGE_LINE)    master_list = get_course_enrollment_history_for_all_courses_in_folder(        os.path.dirname(__file__) + '/' + DATABASE_FOLDER_NAME + '/'    )    choose_course_range(master_list)    print(PAGE_LINE)    choose_course(master_list)    print(PAGE_LINE)    print("END OF PROGRAM")    print(PAGE_LINE)if __name__ == "__main__":    import python_ta    import python_ta.contracts    import doctest    doctest.testmod()    python_ta.check_all(config={        'extra-imports': ["os", "__future__", "numpy", "matplotlib.pyplot", "functions_and_classes"],        'allowed-io': ["get_text_file", "ensure_database_files_exist",                       "choose_course_range", "choose_course", "main_loop"],        'max-line-length': 120,        'disable': ['R1705', 'C0200', "E9959", "C0103", "R1721",                    "E9996", "W0401", "E9969", "R1702", "R0912"],    })    python_ta.contracts.check_all_contracts()    # Some previous settings have been carried over from <functions_and_classes>    # "E9996" Disabled:    # There are loops that may loop only once, but that will only occur    # when the user inputs proper input each time. These types of loops    # are necessary.    # "W0401" Disabled:    # This is diabled because the wildcard import is intended.    # It's intended to import everything that <functions_and_classes> imported.    # "E9969" Disabled:    # The variables, if they get used, will end up getting defined.    # However, due to the loops/conditionals, this is not very obvious.    # "R1702" Disabled:    # This is a stylistic choice, and adding helper functions (in my opinion)    # would make things more cluttered.    # "R0912" Disabled    # This is a stylistic choice, and adding helper functions (in my opinion)    # would make things more cluttered.